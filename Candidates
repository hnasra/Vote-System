import tkinter as tk

class CandidateMenu(tk.Toplevel):
    def __init__(self, master):
        super().__init__(master)
        self.title("Candidate Menu")
        self.geometry("300x250")
        self.votes = {'John': 0, 'Jane': 0}
        self.voted = False
        self.voted_ids = set()
        self.create_widgets()

    def validate_id(self, new_text: str) -> bool:
        """Validate the ID entered by the user."""
        if new_text.isdigit() or new_text == "":
            return True
        else:
            return False

    def create_widgets(self):
        """Create GUI widgets for the candidate menu."""
        self.label = tk.Label(self, text="Candidate Menu", font=("Arial", 14))
        self.label.pack(pady=10)

        self.id_label = tk.Label(self, text="Enter your ID Number:")
        self.id_label.pack()

        self.id_var = tk.StringVar()
        validate_id = self.register(self.validate_id)

        self.id_entry = tk.Entry(self, textvariable=self.id_var, validate="key", validatecommand=(validate_id, '%P'))
        self.id_entry.pack()

        self.vote_status_label = tk.Label(self, text="", fg="red")
        self.vote_status_label.pack()

        self.john_button = tk.Button(self, text="Vote for John", command=lambda: self.vote("John"))
        self.john_button.pack(pady=5)

        self.jane_button = tk.Button(self, text="Vote for Jane", command=lambda: self.vote("Jane"))
        self.jane_button.pack(pady=5)

        self.exit_button = tk.Button(self, text="Exit Voting", command=self.exit_voting)
        self.exit_button.pack(pady=5)

    def check_voted_id(self, voter_id: str) -> bool:
        """Check if the given voter ID has already voted."""
        if voter_id in self.voted_ids:
            print("This ID has already voted.")
            return True
        else:
            return False

    def vote(self, candidate: str):
        """Record a vote for the given candidate."""
        if not self.voted:
            voter_id = self.id_entry.get()
            if voter_id:
                if not self.check_voted_id(voter_id):
                    self.votes[candidate] += 1
                    print(f"{voter_id} voted for {candidate}.")
                    self.voted = True

                    with open("results.txt", "a") as results_file:
                        results_file.write(f"Voter ID: {voter_id}, Voted for: {candidate}\n")

                    self.voted_ids.add(voter_id)
            else:
                self.vote_status_label.config(text="Please enter your ID number.", fg="red")
                self.vote_status_label.update_idletasks()
        else:
            self.vote_status_label.config(text="You have already voted.")
            self.vote_status_label.update_idletasks()

    def exit_voting(self):
        """Exit the voting process and returns to the main menu."""
        self.master.deiconify()
        self.destroy()
